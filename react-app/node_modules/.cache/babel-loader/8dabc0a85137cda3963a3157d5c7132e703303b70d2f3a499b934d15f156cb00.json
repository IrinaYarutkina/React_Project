{"ast":null,"code":"var _jsxFileName = \"/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Components/WordContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Создаем контекст\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WordContext = /*#__PURE__*/createContext();\nexport function WordContextProvider({\n  children\n}) {\n  _s();\n  const [words, setWords] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Функция для загрузки слов с сервера\n  const fetchWords = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Замените URL на ваш реальный адрес API\n      const response = await fetch('https://your-api.com/api/words');\n      if (!response.ok) throw new Error(`Ошибка загрузки: ${response.status}`);\n      const data = await response.json();\n      setWords(data);\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Загрузка данных при монтировании (componentDidMount)\n  useEffect(() => {\n    fetchWords();\n  }, []);\n\n  // Добавление слова\n  const addWord = async newWord => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://your-api.com/api/words', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newWord)\n      });\n      if (!response.ok) throw new Error('Ошибка добавления');\n      const createdWord = await response.json();\n      setWords(prev => [...prev, createdWord]);\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Изменение слова\n  const updateWord = async (id, updatedWord) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(``, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedWord)\n      });\n      if (!response.ok) throw new Error('Ошибка обновления');\n      const data = await response.json();\n      setWords(prev => prev.map(w => w.id === id ? data : w));\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Удаление слова\n  const deleteWord = async id => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`https://your-api.com/api/words/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Ошибка удаления');\n      setWords(prev => prev.filter(w => w.id !== id));\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(WordContext.Provider, {\n    value: {\n      words,\n      loading,\n      error,\n      fetchWords,\n      addWord,\n      updateWord,\n      deleteWord\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(WordContextProvider, \"ewV9K2WOsbOiWUp7tk1LLBO1jiA=\");\n_c = WordContextProvider;\nvar _c;\n$RefreshReg$(_c, \"WordContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","WordContext","WordContextProvider","children","_s","words","setWords","loading","setLoading","error","setError","fetchWords","response","fetch","ok","Error","status","data","json","e","message","addWord","newWord","method","headers","body","JSON","stringify","createdWord","prev","updateWord","id","updatedWord","map","w","deleteWord","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Components/WordContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\n// Создаем контекст\nexport const WordContext = createContext();\n\nexport function WordContextProvider({ children }) {\n  const [words, setWords] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Функция для загрузки слов с сервера\n  const fetchWords = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Замените URL на ваш реальный адрес API\n      const response = await fetch('https://your-api.com/api/words');\n      if (!response.ok) throw new Error(`Ошибка загрузки: ${response.status}`);\n      const data = await response.json();\n      setWords(data);\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Загрузка данных при монтировании (componentDidMount)\n  useEffect(() => {\n    fetchWords();\n  }, []);\n\n  // Добавление слова\n  const addWord = async (newWord) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://your-api.com/api/words', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newWord),\n      });\n      if (!response.ok) throw new Error('Ошибка добавления');\n      const createdWord = await response.json();\n      setWords(prev => [...prev, createdWord]);\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Изменение слова\n  const updateWord = async (id, updatedWord) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(``, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updatedWord),\n      });\n      if (!response.ok) throw new Error('Ошибка обновления');\n      const data = await response.json();\n      setWords(prev => prev.map(w => (w.id === id ? data : w)));\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Удаление слова\n  const deleteWord = async (id) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`https://your-api.com/api/words/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Ошибка удаления');\n      setWords(prev => prev.filter(w => w.id !== id));\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <WordContext.Provider\n      value={{\n        words,\n        loading,\n        error,\n        fetchWords,\n        addWord,\n        updateWord,\n        deleteWord,\n      }}\n    >\n      {children}\n    </WordContext.Provider>\n  );\n}\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}