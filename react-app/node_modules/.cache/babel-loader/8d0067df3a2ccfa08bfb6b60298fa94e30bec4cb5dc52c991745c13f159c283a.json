{"ast":null,"code":"import { makeAutoObservable, runInAction } from \"mobx\";\nclass WordStore {\n  constructor() {\n    this.words = [];\n    this.loading = true;\n    this.error = null;\n    this.apiBase = 'http://itgirlschool.justmakeit.ru/api/words';\n    // Загрузка слов\n    this.fetchWords = async () => {\n      this.loading = true;\n      try {\n        const response = await fetch(this.apiBase);\n        if (!response.ok) throw new Error('Ошибка при получении слов');\n        const data = await response.json();\n        runInAction(() => {\n          this.words = data.map(word => ({\n            ...word,\n            id: parseInt(word.id, 10)\n          }));\n          this.error = null;\n          this.loading = false;\n        });\n      } catch (err) {\n        runInAction(() => {\n          this.error = err.message;\n          this.loading = false;\n        });\n      }\n    };\n    // Добавление слова\n    this.addWord = async newWord => {\n      try {\n        const response = await fetch(`${this.apiBase}/add`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(newWord)\n        });\n        if (!response.ok) throw new Error('Ошибка при добавлении слова');\n        this.fetchWords();\n      } catch (err) {\n        runInAction(() => {\n          this.error = err.message;\n        });\n      }\n    };\n    // Обновление слова\n    this.updateWord = async updatedWord => {\n      try {\n        const response = await fetch(`${this.apiBase}/${updatedWord.id}/update`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatedWord)\n        });\n        if (!response.ok) throw new Error('Ошибка при обновлении слова');\n        this.fetchWords();\n      } catch (err) {\n        runInAction(() => {\n          this.error = err.message;\n        });\n      }\n    };\n    // Удаление слова\n    this.deleteWord = async id => {\n      try {\n        const response = await fetch(`${this.apiBase}/${id}/delete`, {\n          method: 'POST'\n        });\n        if (!response.ok) throw new Error('Ошибка при удалении слова');\n        runInAction(() => {\n          this.words = this.words.filter(w => w.id !== id);\n        });\n      } catch (err) {\n        runInAction(() => {\n          this.error = err.message;\n        });\n      }\n    };\n    makeAutoObservable(this);\n  }\n}\nexport default WordStore();","map":{"version":3,"names":["makeAutoObservable","runInAction","WordStore","constructor","words","loading","error","apiBase","fetchWords","response","fetch","ok","Error","data","json","map","word","id","parseInt","err","message","addWord","newWord","method","headers","body","JSON","stringify","updateWord","updatedWord","deleteWord","filter","w"],"sources":["/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/stores/WordStore.js"],"sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\n\nclass WordStore {\n    words = [];\n    loading = true;\n    error = null;\n    apiBase = 'http://itgirlschool.justmakeit.ru/api/words';\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // Загрузка слов\n    fetchWords = async () => {\n    this.loading = true;\n    try {\n        const response = await fetch(this.apiBase);\n        if (!response.ok) throw new Error('Ошибка при получении слов');\n        const data = await response.json();\n\n    runInAction(() => {\n        this.words = data.map(word => ({\n        ...word,\n        id: parseInt(word.id, 10),\n        }));\n        this.error = null;\n        this.loading = false;\n        });\n    } catch (err) {\n        runInAction(() => {\n        this.error = err.message;\n        this.loading = false;\n        });\n    }\n    };\n\n// Добавление слова\n    addWord = async (newWord) => {\n    try {\n        const response = await fetch(`${this.apiBase}/add`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newWord),\n    });\n        if (!response.ok) throw new Error('Ошибка при добавлении слова');\n        this.fetchWords();\n    } catch (err) {\n        runInAction(() => {\n        this.error = err.message;\n    });\n    }\n    };\n\n  // Обновление слова\n    updateWord = async (updatedWord) => {\n    try {\n        const response = await fetch(`${this.apiBase}/${updatedWord.id}/update`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updatedWord),\n    });\n        if (!response.ok) throw new Error('Ошибка при обновлении слова');\n        this.fetchWords();\n    } catch (err) {\n        runInAction(() => {\n        this.error = err.message;\n        });\n    }\n    };\n\n  // Удаление слова\n    deleteWord = async (id) => {\n    try {\n        const response = await fetch(`${this.apiBase}/${id}/delete`, {\n        method: 'POST',\n        });\n        if (!response.ok) throw new Error('Ошибка при удалении слова');\n        runInAction(() => {\n        this.words = this.words.filter(w => w.id !== id);\n    });\n    } catch (err) {\n        runInAction(() => {\n        this.error = err.message;\n        });\n    }\n    };\n}\n\nexport default WordStore();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}