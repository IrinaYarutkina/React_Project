{"ast":null,"code":"var _jsxFileName = \"/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Components/WordContext.jsx\";\n// WordContext.jsx\nimport React, { createContext, Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WordContext = /*#__PURE__*/createContext();\nexport class WordContextProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      words: [],\n      loading: false,\n      error: null\n    };\n    this.fetchWords = async () => {\n      this.setState({\n        loading: true,\n        error: null\n      });\n      try {\n        const response = await fetch('http://localhost:3001/words');\n        if (!response.ok) throw new Error('Ошибка загрузки слов');\n        const data = await response.json();\n        this.setState({\n          words: data.length ? data : this.getInitialWords()\n        });\n      } catch (err) {\n        this.setState({\n          error: err.message || 'Неизвестная ошибка'\n        });\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    };\n    this.getInitialWords = () => [{\n      id: 1,\n      word: 'apple',\n      translation: 'яблоко'\n    }, {\n      id: 2,\n      word: 'book',\n      translation: 'книга'\n    }, {\n      id: 3,\n      word: 'sun',\n      translation: 'солнце'\n    }];\n    this.addWord = async newWord => {\n      this.setState({\n        loading: true,\n        error: null\n      });\n      try {\n        const response = await fetch('http://localhost:3001/words', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(newWord)\n        });\n        if (!response.ok) throw new Error('Ошибка добавления слова');\n        const savedWord = await response.json();\n        this.setState(({\n          words\n        }) => ({\n          words: [...words, savedWord]\n        }));\n      } catch (err) {\n        this.setState({\n          error: err.message\n        });\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    };\n    this.updateWord = async (id, updatedWord) => {\n      this.setState({\n        loading: true,\n        error: null\n      });\n      try {\n        const response = await fetch(`http://localhost:3001/words/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatedWord)\n        });\n        if (!response.ok) throw new Error('Ошибка обновления слова');\n        const data = await response.json();\n        this.setState(({\n          words\n        }) => ({\n          words: words.map(word => word.id === id ? data : word)\n        }));\n      } catch (err) {\n        this.setState({\n          error: err.message\n        });\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    };\n    this.deleteWord = async id => {\n      this.setState({\n        loading: true,\n        error: null\n      });\n      try {\n        const response = await fetch(`http://localhost:3001/words/${id}`, {\n          method: 'DELETE'\n        });\n        if (!response.ok) throw new Error('Ошибка удаления слова');\n        this.setState(({\n          words\n        }) => ({\n          words: words.filter(word => word.id !== id)\n        }));\n      } catch (err) {\n        this.setState({\n          error: err.message\n        });\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    };\n  }\n  componentDidMount() {\n    this.fetchWords();\n  }\n  render() {\n    const {\n      children\n    } = this.props;\n    const {\n      words,\n      loading,\n      error\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(WordContext.Provider, {\n      value: {\n        words,\n        loading,\n        error,\n        addWord: this.addWord,\n        updateWord: this.updateWord,\n        deleteWord: this.deleteWord,\n        fetchWords: this.fetchWords\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","createContext","Component","jsxDEV","_jsxDEV","WordContext","WordContextProvider","constructor","args","state","words","loading","error","fetchWords","setState","response","fetch","ok","Error","data","json","length","getInitialWords","err","message","id","word","translation","addWord","newWord","method","headers","body","JSON","stringify","savedWord","updateWord","updatedWord","map","deleteWord","filter","componentDidMount","render","children","props","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Components/WordContext.jsx"],"sourcesContent":["// WordContext.jsx\nimport React, { createContext, Component } from 'react';\n\nexport const WordContext = createContext();\n\nexport class WordContextProvider extends Component {\n  state = {\n    words: [],\n    loading: false,\n    error: null,\n  };\n\n  componentDidMount() {\n    this.fetchWords();\n  }\n\n  fetchWords = async () => {\n    this.setState({ loading: true, error: null });\n    try {\n      const response = await fetch('http://localhost:3001/words');\n      if (!response.ok) throw new Error('Ошибка загрузки слов');\n      const data = await response.json();\n      this.setState({ words: data.length ? data : this.getInitialWords() });\n    } catch (err) {\n      this.setState({ error: err.message || 'Неизвестная ошибка' });\n    } finally {\n      this.setState({ loading: false });\n    }\n  };\n\n  getInitialWords = () => ([\n    { id: 1, word: 'apple', translation: 'яблоко' },\n    { id: 2, word: 'book', translation: 'книга' },\n    { id: 3, word: 'sun', translation: 'солнце' },\n  ]);\n\n  addWord = async (newWord) => {\n    this.setState({ loading: true, error: null });\n    try {\n      const response = await fetch('http://localhost:3001/words', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newWord),\n      });\n      if (!response.ok) throw new Error('Ошибка добавления слова');\n      const savedWord = await response.json();\n      this.setState(({ words }) => ({ words: [...words, savedWord] }));\n    } catch (err) {\n      this.setState({ error: err.message });\n    } finally {\n      this.setState({ loading: false });\n    }\n  };\n\n  updateWord = async (id, updatedWord) => {\n    this.setState({ loading: true, error: null });\n    try {\n      const response = await fetch(`http://localhost:3001/words/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updatedWord),\n      });\n      if (!response.ok) throw new Error('Ошибка обновления слова');\n      const data = await response.json();\n      this.setState(({ words }) => ({\n        words: words.map(word => (word.id === id ? data : word)),\n      }));\n    } catch (err) {\n      this.setState({ error: err.message });\n    } finally {\n      this.setState({ loading: false });\n    }\n  };\n\n  deleteWord = async (id) => {\n    this.setState({ loading: true, error: null });\n    try {\n      const response = await fetch(`http://localhost:3001/words/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Ошибка удаления слова');\n      this.setState(({ words }) => ({\n        words: words.filter(word => word.id !== id),\n      }));\n    } catch (err) {\n      this.setState({ error: err.message });\n    } finally {\n      this.setState({ loading: false });\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    const { words, loading, error } = this.state;\n    return (\n      <WordContext.Provider\n        value={{\n          words,\n          loading,\n          error,\n          addWord: this.addWord,\n          updateWord: this.updateWord,\n          deleteWord: this.deleteWord,\n          fetchWords: this.fetchWords,\n        }}\n      >\n        {children}\n      </WordContext.Provider>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}