{"ast":null,"code":"var _jsxFileName = \"/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Components/WordContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WordContext = /*#__PURE__*/createContext();\nexport function WordContextProvider({\n  children\n}) {\n  _s();\n  const [words, setWords] = useState([{\n    id: 1,\n    word: 'apple',\n    translation: 'яблоко'\n  }, {\n    id: 2,\n    word: 'book',\n    translation: 'книга'\n  }, {\n    id: 3,\n    word: 'sun',\n    translation: 'солнце'\n  }]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Загрузка слов \n  useEffect(() => {\n    fetchWords();\n  }, []);\n  const fetchWords = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('http://localhost:3001/words'); // Замените на ваш реальный адрес\n      if (!response.ok) {\n        throw new Error('Ошибка загрузки слов');\n      }\n      const data = await response.json();\n      setWords(data);\n    } catch (err) {\n      setError(err.message || 'Неизвестная ошибка');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addWord = async newWord => {\n    try {\n      const response = await fetch('http://localhost:3001/words', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newWord)\n      });\n      const savedWord = await response.json();\n      setWords(prev => [...prev, savedWord]);\n    } catch (err) {\n      setError('Ошибка добавления слова');\n    }\n  };\n  const updateWord = async (id, updatedWord) => {\n    try {\n      const response = await fetch(`http://localhost:3001/words/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedWord)\n      });\n      const data = await response.json();\n      setWords(prev => prev.map(word => word.id === id ? data : word));\n    } catch (err) {\n      setError('Ошибка обновления слова');\n    }\n  };\n  const deleteWord = async id => {\n    try {\n      await fetch(`http://localhost:3001/words/${id}`, {\n        method: 'DELETE'\n      });\n      setWords(prev => prev.filter(word => word.id !== id));\n    } catch (err) {\n      setError('Ошибка удаления слова');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(WordContext.Provider, {\n    value: {\n      words,\n      loading,\n      error,\n      addWord,\n      updateWord,\n      deleteWord,\n      fetchWords\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(WordContextProvider, \"NntCdDiwW1aMyQy975m9DUmvgA8=\");\n_c = WordContextProvider;\nvar _c;\n$RefreshReg$(_c, \"WordContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","WordContext","WordContextProvider","children","_s","words","setWords","id","word","translation","loading","setLoading","error","setError","fetchWords","response","fetch","ok","Error","data","json","err","message","addWord","newWord","method","headers","body","JSON","stringify","savedWord","prev","updateWord","updatedWord","map","deleteWord","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Components/WordContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const WordContext = createContext();\n\nexport function WordContextProvider({ children }) {\n    const [words, setWords] = useState([\n        { id: 1, word: 'apple', translation: 'яблоко' },\n        { id: 2, word: 'book', translation: 'книга' },\n        { id: 3, word: 'sun', translation: 'солнце' },\n    ]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n  // Загрузка слов \n    useEffect(() => {\n        fetchWords();\n    }, []);\n\n    const fetchWords = async () => {\n        try {\n        setLoading(true);\n        const response = await fetch('http://localhost:3001/words'); // Замените на ваш реальный адрес\n        if (!response.ok) {\n        throw new Error('Ошибка загрузки слов');\n        }\n        const data = await response.json();\n            setWords(data);\n        } catch (err) {\n        setError(err.message || 'Неизвестная ошибка');\n        } finally {\n        setLoading(false);\n    }\n    };\n\n    const addWord = async (newWord) => {\n        try {\n            const response = await fetch('http://localhost:3001/words', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(newWord),\n    });\n    const savedWord = await response.json();\n        setWords(prev => [...prev, savedWord]);\n    } catch (err) {\n        setError('Ошибка добавления слова');\n    }\n    };\n\n    const updateWord = async (id, updatedWord) => {\n        try {\n            const response = await fetch(`http://localhost:3001/words/${id}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(updatedWord),\n        });\n            const data = await response.json();\n                setWords(prev =>\n            prev.map(word => (word.id === id ? data : word))\n        );\n    } catch (err) {\n        setError('Ошибка обновления слова');\n    }\n};\n\n    const deleteWord = async (id) => {\n    try {\n        await fetch(`http://localhost:3001/words/${id}`, {\n        method: 'DELETE',\n    });\n        setWords(prev => prev.filter(word => word.id !== id));\n    } catch (err) {\n        setError('Ошибка удаления слова');\n    }\n    };\n\n    return (\n    <WordContext.Provider\n        value={{\n        words,\n        loading,\n        error,\n        addWord,\n        updateWord,\n        deleteWord,\n        fetchWords,\n        }}\n    >\n        {children}\n    </WordContext.Provider>\n);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}