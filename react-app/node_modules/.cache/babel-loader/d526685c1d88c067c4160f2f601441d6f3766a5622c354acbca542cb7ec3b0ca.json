{"ast":null,"code":"var _jsxFileName = \"/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Context/WordsContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WordsContext = /*#__PURE__*/createContext();\nexport function WordsProvider({\n  children\n}) {\n  _s();\n  const [words, setWords] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Загрузка слов\n  const fetchWords = async () => {\n    setLoading(true);\n    try {\n      await fetch('http://localhost:3001/words'); // Укажи нужный endpoint\n      if (!response.ok) throw new Error('Ошибка при получении слов');\n      const data = await response.json();\n      setWords(data);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Добавление слова\n  const addWord = async newWord => {\n    try {\n      const response = await fetch('/api/words', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newWord)\n      });\n      if (!response.ok) throw new Error('Ошибка при добавлении слова');\n      const savedWord = await response.json();\n      setWords(prev => [...prev, savedWord]);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Обновление слова\n  const updateWord = async (id, updatedWord) => {\n    try {\n      const response = await fetch(`/api/words/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedWord)\n      });\n      if (!response.ok) throw new Error('Ошибка при обновлении слова');\n      const updated = await response.json();\n      setWords(prev => prev.map(w => w.id === id ? updated : w));\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Удаление слова\n  const deleteWord = async id => {\n    try {\n      const response = await fetch(`/api/words/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Ошибка при удалении слова');\n      setWords(prev => prev.filter(w => w.id !== id));\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  useEffect(() => {\n    fetchWords();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WordsContext.Provider, {\n    value: {\n      words,\n      loading,\n      error,\n      addWord,\n      updateWord,\n      deleteWord\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(WordsProvider, \"OTr2bhw4K+x0cz+jpMoHEaGtUM8=\");\n_c = WordsProvider;\nvar _c;\n$RefreshReg$(_c, \"WordsProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","jsxDEV","_jsxDEV","WordsContext","WordsProvider","children","_s","words","setWords","loading","setLoading","error","setError","fetchWords","fetch","response","ok","Error","data","json","err","message","addWord","newWord","method","headers","body","JSON","stringify","savedWord","prev","updateWord","id","updatedWord","updated","map","w","deleteWord","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Context/WordsContext.js"],"sourcesContent":["import { createContext, useState, useEffect } from 'react';\n\nexport const WordsContext = createContext();\n\nexport function WordsProvider({ children }) {\n    const [words, setWords] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n  // Загрузка слов\n    const fetchWords = async () => {\n    setLoading(true);\n    try {\n        await fetch('http://localhost:3001/words');  // Укажи нужный endpoint\n        if (!response.ok) throw new Error('Ошибка при получении слов');\n        const data = await response.json();\n        setWords(data);\n    } catch (err) {\n        setError(err.message);\n    } finally {\n        setLoading(false);\n    }\n    };\n\n  // Добавление слова\n    const addWord = async (newWord) => {\n    try {\n        const response = await fetch('/api/words', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newWord),\n    });\n        if (!response.ok) throw new Error('Ошибка при добавлении слова');\n        const savedWord = await response.json();\n        setWords(prev => [...prev, savedWord]);\n    } catch (err) {\n        setError(err.message);\n    }\n  };\n\n  // Обновление слова\n    const updateWord = async (id, updatedWord) => {\n    try {\n        const response = await fetch(`/api/words/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updatedWord),\n    });\n    if (!response.ok) throw new Error('Ошибка при обновлении слова');\n    const updated = await response.json();\n    setWords(prev => prev.map(w => w.id === id ? updated : w));\n    } catch (err) {\n        setError(err.message);\n    }\n};\n\n  // Удаление слова\n    const deleteWord = async (id) => {\n    try {\n        const response = await fetch(`/api/words/${id}`, { method: 'DELETE' });\n        if (!response.ok) throw new Error('Ошибка при удалении слова');\n        setWords(prev => prev.filter(w => w.id !== id));\n    } catch (err) {\n        setError(err.message);\n    }\n    };\n\n    useEffect(() => {\n    fetchWords();\n    }, []);\n\n    return (\n    <WordsContext.Provider value={{\n        words,\n        loading,\n        error,\n        addWord,\n        updateWord,\n        deleteWord\n    }}>\n        {children}\n    </WordsContext.Provider>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}