{"ast":null,"code":"var _jsxFileName = \"/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Components/WordContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WordContext = /*#__PURE__*/createContext();\nexport function WordContextProvider({\n  children\n}) {\n  _s();\n  const [words, setWords] = useState([{\n    id: 1,\n    word: 'apple',\n    translation: 'яблоко'\n  }, {\n    id: 2,\n    word: 'book',\n    translation: 'книга'\n  }, {\n    id: 3,\n    word: 'sun',\n    translation: 'солнце'\n  }]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Функция загрузки слов из базы\n  const fetchWords = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('http://localhost:3001/words'); // Заменить на адрес API\n      if (!response.ok) {\n        throw new Error('Ошибка загрузки слов');\n      }\n      const data = await response.json();\n      if (data.length === 0) {\n        // Если сервер вернул пустой массив, используем дефолтные слова\n        setWords([{\n          id: 1,\n          word: 'apple',\n          translation: 'яблоко'\n        }, {\n          id: 2,\n          word: 'book',\n          translation: 'книга'\n        }, {\n          id: 3,\n          word: 'sun',\n          translation: 'солнце'\n        }]);\n      } else {\n        setWords(data);\n      }\n    } catch (err) {\n      setError(err.message || 'Неизвестная ошибка');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Загружаем слова при монтировании компонента\n  useEffect(() => {\n    fetchWords();\n  }, []);\n\n  // Добавить слово\n  const addWord = async newWord => {\n    try {\n      setError(null);\n      const response = await fetch('http://localhost:3001/words', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newWord)\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка добавления слова');\n      }\n      const savedWord = await response.json();\n      setWords(prev => [...prev, savedWord]);\n    } catch (err) {\n      setError(err.message || 'Ошибка добавления слова');\n    }\n  };\n\n  // Обновить слово\n  const updateWord = async (id, updatedWord) => {\n    try {\n      setError(null);\n      const response = await fetch(`http://localhost:3001/words/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedWord)\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка обновления слова');\n      }\n      const data = await response.json();\n      setWords(prev => prev.map(word => word.id === id ? data : word));\n    } catch (err) {\n      setError(err.message || 'Ошибка обновления слова');\n    }\n  };\n\n  // Удалить слово\n  const deleteWord = async id => {\n    try {\n      setError(null);\n      const response = await fetch(`http://localhost:3001/words/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка удаления слова');\n      }\n      setWords(prev => prev.filter(word => word.id !== id));\n    } catch (err) {\n      setError(err.message || 'Ошибка удаления слова');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(WordContext.Provider, {\n    value: {\n      words,\n      loading,\n      error,\n      addWord,\n      updateWord,\n      deleteWord,\n      fetchWords\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(WordContextProvider, \"z95q0vKLSC8TkJM6RPmgu/efUi4=\");\n_c = WordContextProvider;\nvar _c;\n$RefreshReg$(_c, \"WordContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","WordContext","WordContextProvider","children","_s","words","setWords","id","word","translation","loading","setLoading","error","setError","fetchWords","response","fetch","ok","Error","data","json","length","err","message","addWord","newWord","method","headers","body","JSON","stringify","savedWord","prev","updateWord","updatedWord","map","deleteWord","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Components/WordContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const WordContext = createContext();\n\nexport function WordContextProvider({ children }) {\n  const [words, setWords] = useState([\n    { id: 1, word: 'apple', translation: 'яблоко' },\n    { id: 2, word: 'book', translation: 'книга' },\n    { id: 3, word: 'sun', translation: 'солнце' },\n  ]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Функция загрузки слов из базы\n  const fetchWords = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('http://localhost:3001/words'); // Заменить на адрес API\n      if (!response.ok) {\n        throw new Error('Ошибка загрузки слов');\n      }\n      const data = await response.json();\n\n      if (data.length === 0) {\n        // Если сервер вернул пустой массив, используем дефолтные слова\n        setWords([\n          { id: 1, word: 'apple', translation: 'яблоко' },\n          { id: 2, word: 'book', translation: 'книга' },\n          { id: 3, word: 'sun', translation: 'солнце' },\n        ]);\n      } else {\n        setWords(data);\n      }\n    } catch (err) {\n      setError(err.message || 'Неизвестная ошибка');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Загружаем слова при монтировании компонента\n  useEffect(() => {\n    fetchWords();\n  }, []);\n\n  // Добавить слово\n  const addWord = async (newWord) => {\n    try {\n      setError(null);\n      const response = await fetch('http://localhost:3001/words', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newWord),\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка добавления слова');\n      }\n      const savedWord = await response.json();\n      setWords(prev => [...prev, savedWord]);\n    } catch (err) {\n      setError(err.message || 'Ошибка добавления слова');\n    }\n  };\n\n  // Обновить слово\n  const updateWord = async (id, updatedWord) => {\n    try {\n      setError(null);\n      const response = await fetch(`http://localhost:3001/words/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updatedWord),\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка обновления слова');\n      }\n      const data = await response.json();\n      setWords(prev => prev.map(word => (word.id === id ? data : word)));\n    } catch (err) {\n      setError(err.message || 'Ошибка обновления слова');\n    }\n  };\n\n  // Удалить слово\n  const deleteWord = async (id) => {\n    try {\n      setError(null);\n      const response = await fetch(`http://localhost:3001/words/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка удаления слова');\n      }\n      setWords(prev => prev.filter(word => word.id !== id));\n    } catch (err) {\n      setError(err.message || 'Ошибка удаления слова');\n    }\n  };\n\n  return (\n    <WordContext.Provider\n      value={{\n        words,\n        loading,\n        error,\n        addWord,\n        updateWord,\n        deleteWord,\n        fetchWords,\n      }}\n    >\n      {children}\n    </WordContext.Provider>\n  );\n}\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}