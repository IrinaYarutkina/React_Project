{"ast":null,"code":"var _jsxFileName = \"/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Components/WordList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { WordsContext } from '../Context/WordsContext';\nimport ErrorMessage from './ErrorMessage';\nimport '../WordList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WordList() {\n  _s();\n  const {\n    words,\n    loading,\n    error,\n    addWord,\n    updateWord,\n    deleteWord\n  } = useContext(WordsContext);\n  const [editingId, setEditingId] = useState(null);\n  const [editedWord, setEditedWord] = useState({\n    word: '',\n    translation: ''\n  });\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isAddingNew, setIsAddingNew] = useState(false);\n  function emptyWord() {\n    return {\n      english: '',\n      russian: '',\n      transcription: '',\n      tags: '',\n      tags_json: ''\n    };\n  }\n  const startEditing = word => {\n    setEditingId({\n      english: word.english,\n      russian: word.russian,\n      transcription: word.transcription || '',\n      tags: word.tags || '',\n      tags_json: word.tags_json || ''\n    });\n    setIsAddingNew(false);\n    setErrorMessage('');\n  };\n  const cancelEditing = () => {\n    setEditingId(null);\n    setEditedWord(emptyWord());\n    setIsAddingNew(false);\n    setErrorMessage('');\n  };\n  const saveEditing = async id => {\n    const isEmpty = !editedWord.english.trim() || !editedWord.russian.trim();\n    if (isEmpty) {\n      setErrorMessage('❌ Пожалуйста, заполните поля \"english\" и \"russian\".');\n      return;\n    }\n    try {\n      if (isAddingNew) {\n        await addWord(editedWord);\n        console.log('✅ Новое слово добавлено:', editedWord);\n      } else {\n        await updateWord({\n          ...editedWord,\n          id\n        });\n        console.log('✅ Слово обновлено:', editedWord);\n      }\n    } catch (err) {\n      setErrorMessage(`Ошибка: ${err.message}`);\n    }\n    cancelEditing();\n  };\n  const handleDelete = async id => {\n    try {\n      await deleteWord(id);\n    } catch (err) {\n      setErrorMessage(`Ошибка: ${err.message}`);\n    }\n  };\n  const startCreating = () => {\n    setIsAddingNew(true);\n    setEditingId(null);\n    setEditedWord(emptyWord());\n    setErrorMessage('');\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n    message: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0441\\u043B\\u043E\\u0432\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-button\",\n      onClick: startCreating,\n      children: \"\\u2795 \\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0441\\u043B\\u043E\\u0432\\u043E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"English\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Russian\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transcription\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u041A\\u0430\\u0440\\u0442\\u043E\\u0447\\u043A\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [words.map(word => /*#__PURE__*/_jsxDEV(WordRow, {\n          word: word,\n          isEditing: editingId === word.id,\n          editedWord: editedWord,\n          startEditing: startEditing,\n          cancelEditing: cancelEditing,\n          saveEditing: saveEditing,\n          deleteWord: handleDelete,\n          setEditedWord: setEditedWord\n        }, word.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)), isAddingNew && /*#__PURE__*/_jsxDEV(WordRow, {\n          word: {\n            id: null\n          },\n          isEditing: true,\n          editedWord: editedWord,\n          cancelEditing: cancelEditing,\n          saveEditing: saveEditing,\n          setEditedWord: setEditedWord,\n          isNew: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(WordList, \"DV9hIADlkaof/zoBjwDKEaAMuPA=\");\n_c = WordList;\nfunction WordRow({\n  word,\n  editedWord,\n  isEditing,\n  startEditing,\n  cancelEditing,\n  saveEditing,\n  deleteWord,\n  setEditedWord,\n  isNew = false\n}) {\n  if (isEditing) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: editedWord.english,\n          onChange: e => setEditedWord({\n            ...editedWord,\n            english: e.target.value\n          }),\n          className: !editedWord.english.trim() ? 'input-error' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: editedWord.russian,\n          onChange: e => setEditedWord({\n            ...editedWord,\n            russian: e.target.value\n          }),\n          className: !editedWord.russian.trim() ? 'input-error' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: editedWord.transcription,\n          onChange: e => setEditedWord({\n            ...editedWord,\n            transcription: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: !isNew && /*#__PURE__*/_jsxDEV(Link, {\n          to: `/card/${word.id}`,\n          children: \"\\u041F\\u0435\\u0440\\u0435\\u0439\\u0442\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => saveEditing(word.id),\n          children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: cancelEditing,\n          children: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: word.english\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: word.russian\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: word.transcription\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: `/card/${word.id}`,\n        children: \"\\u041F\\u0435\\u0440\\u0435\\u0439\\u0442\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => startEditing(word),\n        children: \"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteWord(word.id),\n        children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n}\n_c2 = WordRow;\nexport default WordList;\n\n/* const initialWords = [\n    { id: 1, word: 'apple', translation: 'яблоко' },\n    { id: 2, word: 'book', translation: 'книга' },\n    { id: 3, word: 'sun', translation: 'солнце' },\n];\n\nfunction WordList() {\n    const [words, setWords] = useState(initialWords);\n    const [editingId, setEditingId] = useState(null);\n    const [editedWord, setEditedWord] = useState({ word: '', translation: '' });\n    const [errorMessage, setErrorMessage] = useState(''); \n    const [isAddingNew, setIsAddingNew] = useState(false);\n\n    const startEditing = (word) => {\n    setEditingId(word.id);\n    setEditedWord({ word: word.word, translation: word.translation });\n    setIsAddingNew(false); \n    setErrorMessage(''); \n};\n\n    const cancelEditing = () => {\n    setEditingId(null);\n    setEditedWord({ word: '', translation: '' });\n    setIsAddingNew(false);\n    setErrorMessage('');\n    };\n\n    const saveEditing = (id) => {\n      const isWordEmpty = editedWord.word.trim() === '';\n      const isTranslationEmpty = editedWord.translation.trim() === '';\n  \n      if (isWordEmpty || isTranslationEmpty) {\n        setErrorMessage('❌ Пожалуйста, заполните все поля перед сохранением.');\n        return; \n      } \n      if (isAddingNew) {\n        const newId = Math.max(...words.map(w => w.id)) + 1;\n        const newWord = { id: newId, ...editedWord };\n        setWords([...words, newWord]);\n        console.log('✅ Новое слово добавлено:', newWord);\n      } else {\n        const updatedWords = words.map(w =>\n          w.id === id ? { ...w, ...editedWord } : w\n        );\n        setWords(updatedWords);\n        console.log('✅ Слово обновлено:', editedWord);\n      }\n\n      cancelEditing();\n    }; \n\n    const deleteWord = (id) => {\n    setWords(words.filter(w => w.id !== id));\n    };\n\n    const startCreating = () => {\n      setIsAddingNew(true);\n      setEditingId(null);\n      setEditedWord({ word: '', translation: '' });\n      setErrorMessage('');\n    };\n\n    return (\n        <div className=\"word-list\">\n            <h2>Список слов</h2>\n            {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n            <button className=\"add-button\" onClick={startCreating}>➕ Добавить слово</button> \n            <table>\n                <thead>\n                <tr>\n                    <th>Слово</th>\n                    <th>Перевод</th>\n                    <th>Карточка</th>\n                    <th>Действия</th>\n                </tr>\n                </thead>\n                <tbody>\n                    {words.map((word) => (\n                        <WordRow\n                            key={word.id}\n                            word={word}\n                            editingId={editingId}\n                            editedWord={editedWord}\n                            startEditing={startEditing}\n                            cancelEditing={cancelEditing}\n                            saveEditing={saveEditing}\n                            deleteWord={deleteWord}\n                            setEditedWord={setEditedWord}\n                            isEditing={editingId === word.id}\n                            />\n                        ))}\n                        {isAddingNew && (\n                          <WordRow\n                            word={{ id: null, word: '', translation: '' }}\n                            editingId={null}\n                            editedWord={editedWord}\n                            startEditing={startEditing}\n                            cancelEditing={cancelEditing}\n                            saveEditing={saveEditing}\n                            deleteWord={deleteWord}\n                            setEditedWord={setEditedWord}\n                            isEditing={true}\n                            isNew={true}\n                          />\n                        )}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nfunction WordRow({\n  word,\n  editedWord,\n  isEditing,\n  startEditing,\n  cancelEditing,\n  saveEditing,\n  deleteWord,\n  setEditedWord,\n  isNew = false\n}) {\n  const isWordEmpty = editedWord.word.trim() === '';\n  const isTranslationEmpty = editedWord.translation.trim() === '';\n\n  if (isEditing) {\n    return (\n      <tr>\n        <td>\n          <input\n            type=\"text\"\n            value={editedWord.word}\n            onChange={(e) =>\n              setEditedWord({ ...editedWord, word: e.target.value })\n            }\n            className={isWordEmpty ? 'input-error' : ''}\n          />\n        </td>\n        <td>\n          <input\n            type=\"text\"\n            value={editedWord.translation}\n            onChange={(e) =>\n              setEditedWord({ ...editedWord, translation: e.target.value })\n            }\n            className={isTranslationEmpty ? 'input-error' : ''}\n          />\n        </td>\n        <td>\n          {!isNew && <Link to={`/card/${word.id}`}>Перейти</Link>}\n        </td>\n        <td>\n          <button onClick={() => saveEditing(word.id)}>Сохранить</button>\n          <button onClick={cancelEditing}>Отмена</button>\n        </td>\n      </tr>\n    );\n  }\n  return (\n    <tr>\n      <td><strong>{word.word}</strong></td>\n      <td>{word.translation}</td>\n      <td>\n        <Link to={`/card/${word.id}`}>Перейти</Link>\n      </td>\n      <td>\n        <button onClick={() => startEditing(word)}>Редактировать</button>\n        <button onClick={() => deleteWord(word.id)}>Удалить</button>\n      </td>\n    </tr>\n  );\n}\n\nexport default WordList; */\nvar _c, _c2;\n$RefreshReg$(_c, \"WordList\");\n$RefreshReg$(_c2, \"WordRow\");","map":{"version":3,"names":["React","useState","useContext","Link","WordsContext","ErrorMessage","jsxDEV","_jsxDEV","WordList","_s","words","loading","error","addWord","updateWord","deleteWord","editingId","setEditingId","editedWord","setEditedWord","word","translation","errorMessage","setErrorMessage","isAddingNew","setIsAddingNew","emptyWord","english","russian","transcription","tags","tags_json","startEditing","cancelEditing","saveEditing","id","isEmpty","trim","console","log","err","message","handleDelete","startCreating","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","WordRow","isEditing","isNew","_c","type","value","onChange","e","target","to","_c2","$RefreshReg$"],"sources":["/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Components/WordList.jsx"],"sourcesContent":["import React, { useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { WordsContext } from '../Context/WordsContext';\nimport ErrorMessage from './ErrorMessage';\nimport '../WordList.css';\n\nfunction WordList() {\n  const {\n    words,\n    loading,\n    error,\n    addWord,\n    updateWord,\n    deleteWord,\n  } = useContext(WordsContext);\n\n  const [editingId, setEditingId] = useState(null);\n  const [editedWord, setEditedWord] = useState({ word: '', translation: '' });\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isAddingNew, setIsAddingNew] = useState(false); \n\n  function emptyWord() {\n    return {\n      english: '',\n      russian: '',\n      transcription: '',\n      tags: '',\n      tags_json: ''\n    };\n  }\n\n  const startEditing = (word) => {\n    setEditingId({\n      english: word.english,\n      russian: word.russian,\n      transcription: word.transcription || '',\n      tags: word.tags || '',\n      tags_json: word.tags_json || ''\n    });\n    setIsAddingNew(false);\n    setErrorMessage('');\n  };\n\n  const cancelEditing = () => {\n    setEditingId(null);\n    setEditedWord(emptyWord());\n    setIsAddingNew(false);\n    setErrorMessage('');\n  };\n\n  const saveEditing = async (id) => {\n    const isEmpty = !editedWord.english.trim() || !editedWord.russian.trim();\n    if (isEmpty) {\n      setErrorMessage('❌ Пожалуйста, заполните поля \"english\" и \"russian\".');\n      return;\n    } \n\n    try {\n      if (isAddingNew) {\n        await addWord(editedWord);\n        console.log('✅ Новое слово добавлено:', editedWord);\n      } else {\n        await updateWord({ ...editedWord, id });\n        console.log('✅ Слово обновлено:', editedWord);\n      }\n    } catch (err) {\n      setErrorMessage(`Ошибка: ${err.message}`);\n    }\n\n    cancelEditing();\n  }; \n\n  const handleDelete = async (id) => {\n    try {\n      await deleteWord(id);\n    } catch (err) {\n      setErrorMessage(`Ошибка: ${err.message}`);\n    }\n  };\n\n  const startCreating = () => {\n    setIsAddingNew(true);\n    setEditingId(null);\n    setEditedWord(emptyWord());\n    setErrorMessage('');\n  };\n\n  if (loading) return <p>Загрузка...</p>;\n  if (error) return <ErrorMessage message={error} />; \n\n  return (\n    <div className=\"word-list\">\n      <h2>Список слов</h2>\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n      <button className=\"add-button\" onClick={startCreating}>\n        ➕ Добавить слово\n      </button>\n      <table>\n        <thead>\n          <tr>\n            <th>English</th>\n            <th>Russian</th>\n            <th>Transcription</th>\n            <th>Карточка</th>\n            <th>Действия</th>\n          </tr>\n        </thead>\n        <tbody>\n          {words.map((word) => ( \n            <WordRow\n            key={word.id}\n              word={word}\n              isEditing={editingId === word.id}\n              editedWord={editedWord}\n              startEditing={startEditing}\n              cancelEditing={cancelEditing}\n              saveEditing={saveEditing}\n              deleteWord={handleDelete}\n              setEditedWord={setEditedWord}\n          />\n        ))}\n        {isAddingNew && (\n            <WordRow\n            word={{ id: null }}\n            isEditing={true}\n            editedWord={editedWord}\n            cancelEditing={cancelEditing}\n            saveEditing={saveEditing}\n            setEditedWord={setEditedWord}\n            isNew={true}\n          /> \n          )}\n        </tbody>\n      </table>\n    </div>\n  ); \n} \nfunction WordRow({\n  word,\n  editedWord,\n  isEditing,\n  startEditing,\n  cancelEditing,\n  saveEditing,\n  deleteWord,\n  setEditedWord,\n  isNew = false,\n}) {\n\n  if (isEditing) {\n    return (\n      <tr>\n        <td>\n          <input\n            type=\"text\"\n            value={editedWord.english}\n            onChange={(e) =>\n              setEditedWord({ ...editedWord, english: e.target.value })\n            }\n            className={!editedWord.english.trim() ? 'input-error' : ''}\n          />\n        </td> \n        <td>\n          <input\n            type=\"text\"\n            value={editedWord.russian}\n            onChange={(e) =>\n              setEditedWord({ ...editedWord, russian: e.target.value })\n            }\n            className={!editedWord.russian.trim() ? 'input-error' : ''}\n          />\n        </td>\n        <td>\n          <input\n            type=\"text\"\n            value={editedWord.transcription}\n            onChange={(e) =>\n              setEditedWord({ ...editedWord, transcription: e.target.value })\n            }\n          />\n        </td>\n        <td>\n          {!isNew && <Link to={`/card/${word.id}`}>Перейти</Link>}\n        </td>\n        <td>\n          <button onClick={() => saveEditing(word.id)}>Сохранить</button>\n          <button onClick={cancelEditing}>Отмена</button>\n        </td>\n      </tr>\n    );\n  }\n  return (\n    <tr>\n      <td><strong>{word.english}</strong></td>\n      <td>{word.russian}</td>\n      <td>{word.transcription}</td>\n      <td><Link to={`/card/${word.id}`}>Перейти</Link></td>\n      <td>\n        <button onClick={() => startEditing(word)}>Редактировать</button>\n        <button onClick={() => deleteWord(word.id)}>Удалить</button>\n      </td>\n    </tr>\n  );\n}\n\nexport default WordList;\n\n\n\n\n\n\n/* const initialWords = [\n    { id: 1, word: 'apple', translation: 'яблоко' },\n    { id: 2, word: 'book', translation: 'книга' },\n    { id: 3, word: 'sun', translation: 'солнце' },\n];\n\nfunction WordList() {\n    const [words, setWords] = useState(initialWords);\n    const [editingId, setEditingId] = useState(null);\n    const [editedWord, setEditedWord] = useState({ word: '', translation: '' });\n    const [errorMessage, setErrorMessage] = useState(''); \n    const [isAddingNew, setIsAddingNew] = useState(false);\n\n    const startEditing = (word) => {\n    setEditingId(word.id);\n    setEditedWord({ word: word.word, translation: word.translation });\n    setIsAddingNew(false); \n    setErrorMessage(''); \n};\n\n    const cancelEditing = () => {\n    setEditingId(null);\n    setEditedWord({ word: '', translation: '' });\n    setIsAddingNew(false);\n    setErrorMessage('');\n    };\n\n    const saveEditing = (id) => {\n      const isWordEmpty = editedWord.word.trim() === '';\n      const isTranslationEmpty = editedWord.translation.trim() === '';\n  \n      if (isWordEmpty || isTranslationEmpty) {\n        setErrorMessage('❌ Пожалуйста, заполните все поля перед сохранением.');\n        return; \n      } \n      if (isAddingNew) {\n        const newId = Math.max(...words.map(w => w.id)) + 1;\n        const newWord = { id: newId, ...editedWord };\n        setWords([...words, newWord]);\n        console.log('✅ Новое слово добавлено:', newWord);\n      } else {\n        const updatedWords = words.map(w =>\n          w.id === id ? { ...w, ...editedWord } : w\n        );\n        setWords(updatedWords);\n        console.log('✅ Слово обновлено:', editedWord);\n      }\n\n      cancelEditing();\n    }; \n\n    const deleteWord = (id) => {\n    setWords(words.filter(w => w.id !== id));\n    };\n\n    const startCreating = () => {\n      setIsAddingNew(true);\n      setEditingId(null);\n      setEditedWord({ word: '', translation: '' });\n      setErrorMessage('');\n    };\n\n    return (\n        <div className=\"word-list\">\n            <h2>Список слов</h2>\n            {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n            <button className=\"add-button\" onClick={startCreating}>➕ Добавить слово</button> \n            <table>\n                <thead>\n                <tr>\n                    <th>Слово</th>\n                    <th>Перевод</th>\n                    <th>Карточка</th>\n                    <th>Действия</th>\n                </tr>\n                </thead>\n                <tbody>\n                    {words.map((word) => (\n                        <WordRow\n                            key={word.id}\n                            word={word}\n                            editingId={editingId}\n                            editedWord={editedWord}\n                            startEditing={startEditing}\n                            cancelEditing={cancelEditing}\n                            saveEditing={saveEditing}\n                            deleteWord={deleteWord}\n                            setEditedWord={setEditedWord}\n                            isEditing={editingId === word.id}\n                            />\n                        ))}\n                        {isAddingNew && (\n                          <WordRow\n                            word={{ id: null, word: '', translation: '' }}\n                            editingId={null}\n                            editedWord={editedWord}\n                            startEditing={startEditing}\n                            cancelEditing={cancelEditing}\n                            saveEditing={saveEditing}\n                            deleteWord={deleteWord}\n                            setEditedWord={setEditedWord}\n                            isEditing={true}\n                            isNew={true}\n                          />\n                        )}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nfunction WordRow({\n  word,\n  editedWord,\n  isEditing,\n  startEditing,\n  cancelEditing,\n  saveEditing,\n  deleteWord,\n  setEditedWord,\n  isNew = false\n}) {\n  const isWordEmpty = editedWord.word.trim() === '';\n  const isTranslationEmpty = editedWord.translation.trim() === '';\n\n  if (isEditing) {\n    return (\n      <tr>\n        <td>\n          <input\n            type=\"text\"\n            value={editedWord.word}\n            onChange={(e) =>\n              setEditedWord({ ...editedWord, word: e.target.value })\n            }\n            className={isWordEmpty ? 'input-error' : ''}\n          />\n        </td>\n        <td>\n          <input\n            type=\"text\"\n            value={editedWord.translation}\n            onChange={(e) =>\n              setEditedWord({ ...editedWord, translation: e.target.value })\n            }\n            className={isTranslationEmpty ? 'input-error' : ''}\n          />\n        </td>\n        <td>\n          {!isNew && <Link to={`/card/${word.id}`}>Перейти</Link>}\n        </td>\n        <td>\n          <button onClick={() => saveEditing(word.id)}>Сохранить</button>\n          <button onClick={cancelEditing}>Отмена</button>\n        </td>\n      </tr>\n    );\n  }\n  return (\n    <tr>\n      <td><strong>{word.word}</strong></td>\n      <td>{word.translation}</td>\n      <td>\n        <Link to={`/card/${word.id}`}>Перейти</Link>\n      </td>\n      <td>\n        <button onClick={() => startEditing(word)}>Редактировать</button>\n        <button onClick={() => deleteWord(word.id)}>Удалить</button>\n      </td>\n    </tr>\n  );\n}\n\nexport default WordList; */ "],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}