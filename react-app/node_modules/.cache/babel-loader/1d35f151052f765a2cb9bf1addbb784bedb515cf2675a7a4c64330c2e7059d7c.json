{"ast":null,"code":"const API_BASE = 'http://itgirlschool.justmakeit.ru/api/words';\nexport async function fetchWords() {\n  const response = await fetch(API_BASE);\n  if (!response.ok) throw new Error('Ошибка при получении слов');\n  const data = await response.json();\n  return data.map(word => ({\n    ...word,\n    id: parseInt(word.id, 10)\n  }));\n}\nexport async function addWord(newWord) {\n  const response = await fetch(`${API_BASE}/add`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newWord)\n  });\n  if (!response.ok) throw new Error('Ошибка при добавлении слова');\n}\nexport async function updateWord(updatedWord) {\n  const response = await fetch(`${API_BASE}/${updatedWord.id}/update`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updatedWord)\n  });\n  if (!response.ok) throw new Error('Ошибка при обновлении слова');\n}\nexport async function deleteWord(id) {\n  const response = await fetch(`${API_BASE}/${id}/delete`, {\n    method: 'POST'\n  });\n  if (!response.ok) throw new Error('Ошибка при удалении слова');\n}","map":{"version":3,"names":["API_BASE","fetchWords","response","fetch","ok","Error","data","json","map","word","id","parseInt","addWord","newWord","method","headers","body","JSON","stringify","updateWord","updatedWord","deleteWord"],"sources":["/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Api/wordApi.js"],"sourcesContent":["\n\nconst API_BASE = 'http://itgirlschool.justmakeit.ru/api/words';\n\nexport async function fetchWords() {\n    const response = await fetch(API_BASE);\n    if (!response.ok) throw new Error('Ошибка при получении слов');\n    const data = await response.json();\n    return data.map(word => ({\n    ...word,\n    id: parseInt(word.id, 10),\n    }));\n}\n\nexport async function addWord(newWord) {\n    const response = await fetch(`${API_BASE}/add`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newWord),\n    });\n    if (!response.ok) throw new Error('Ошибка при добавлении слова');\n}\n\nexport async function updateWord(updatedWord) {\n    const response = await fetch(`${API_BASE}/${updatedWord.id}/update`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updatedWord),\n    });\n    if (!response.ok) throw new Error('Ошибка при обновлении слова');\n}\n\nexport async function deleteWord(id) {\n    const response = await fetch(`${API_BASE}/${id}/delete`, {\n        method: 'POST',\n    });\n    if (!response.ok) throw new Error('Ошибка при удалении слова');\n}\n"],"mappings":"AAEA,MAAMA,QAAQ,GAAG,6CAA6C;AAE9D,OAAO,eAAeC,UAAUA,CAAA,EAAG;EAC/B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAQ,CAAC;EACtC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;EAC9D,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACE,GAAG,CAACC,IAAI,KAAK;IACzB,GAAGA,IAAI;IACPC,EAAE,EAAEC,QAAQ,CAACF,IAAI,CAACC,EAAE,EAAE,EAAE;EACxB,CAAC,CAAC,CAAC;AACP;AAEA,OAAO,eAAeE,OAAOA,CAACC,OAAO,EAAE;EACnC,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,MAAM,EAAE;IAC5Cc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;EAChC,CAAC,CAAC;EACF,IAAI,CAACX,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;AACpE;AAEA,OAAO,eAAec,UAAUA,CAACC,WAAW,EAAE;EAC1C,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,IAAIoB,WAAW,CAACV,EAAE,SAAS,EAAE;IACjEI,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,WAAW;EACpC,CAAC,CAAC;EACF,IAAI,CAAClB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;AACpE;AAEA,OAAO,eAAegB,UAAUA,CAACX,EAAE,EAAE;EACjC,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,IAAIU,EAAE,SAAS,EAAE;IACrDI,MAAM,EAAE;EACZ,CAAC,CAAC;EACF,IAAI,CAACZ,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;AAClE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}