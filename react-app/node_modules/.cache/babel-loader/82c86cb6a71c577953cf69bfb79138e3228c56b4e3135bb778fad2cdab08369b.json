{"ast":null,"code":"var _jsxFileName = \"/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Context/WordsContext.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { WordsContext } from '../Context/WordsContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WordList() {\n  _s();\n  const {\n    words,\n    loading,\n    error,\n    deleteWord\n  } = useContext(WordsContext);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0441\\u043B\\u043E\\u0432...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    style: {\n      color: 'red'\n    },\n    children: [\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: words.map(word => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [word.word, \" \\u2014 \", word.translation, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteWord(word.id),\n        children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this)]\n    }, word.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}\n\n/*import { createContext, useState, useEffect } from 'react';\n\nexport const WordsContext = createContext();\n\nexport function WordsProvider({ children }) {\n    const [words, setWords] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const apiBase = 'http://itgirlschool.justmakeit.ru/api/words';\n\n  // Загрузка слов\n    const fetchWords = async () => {\n        setLoading(true);\n        try {\n            const response = await fetch(apiBase);\n            if (!response.ok) throw new Error('Ошибка при получении слов');\n            const data = await response.json();\n            \n            const normalizedData = data.map(word => ({\n                ...word,\n                id: parseInt(word.id, 10), \n            }));\n\n            setWords(normalizedData);\n            setError(null);\n        } catch (err) {\n            setError(err.message);\n        } finally {\n            setLoading(false);\n        }\n    }; \n        \n  // Добавление слова\n    const addWord = async (newWord) => {\n    try {\n        const response = await fetch(`${apiBase}/add`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(newWord),\n        });\n        if (!response.ok) throw new Error('Ошибка при добавлении слова');\n        await fetchWords(); // Перезагрузка списка\n    } catch (err) {\n        setError(err.message);\n    }\n};\n\n\n  // Обновление слова\n  const updateWord = async (updatedWord) => {\n    try {\n        const response = await fetch(`${apiBase}/${updatedWord.id}/update`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(updatedWord),\n        });\n        if (!response.ok) throw new Error('Ошибка при обновлении слова');\n        await fetchWords(); // Перезагрузка списка\n    } catch (err) {\n        setError(err.message);\n    }\n};\n\n  // Удаление слова\n    const deleteWord = async (id) => {\n    try {\n        const response = await fetch(`${apiBase}/${id}/delete`, {\n            method: 'POST',\n        });\n        if (!response.ok) throw new Error('Ошибка при удалении слова');\n        setWords(prev => prev.filter(w => w.id !== id));\n    } catch (err) {\n        setError(err.message);\n    }\n};\n\n    useEffect(() => {\n    fetchWords();\n    }, []);\n\n    return (\n        <WordsContext.Provider value={{\n            words,\n            loading,\n            error,\n            addWord,\n            updateWord,\n            deleteWord\n        }}>\n            {children}\n        </WordsContext.Provider>\n    );\n} */\n_s(WordList, \"mTlied14JGM97MT/JiQ8JkB87+0=\");\n_c = WordList;\nvar _c;\n$RefreshReg$(_c, \"WordList\");","map":{"version":3,"names":["React","useContext","WordsContext","jsxDEV","_jsxDEV","WordList","_s","words","loading","error","deleteWord","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","map","word","translation","onClick","id","_c","$RefreshReg$"],"sources":["/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Context/WordsContext.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { WordsContext } from '../Context/WordsContext';\n\nexport default function WordList() {\n    const { words, loading, error, deleteWord } = useContext(WordsContext);\n\n    if (loading) return <p>Загрузка слов...</p>;\n    if (error) return <p style={{ color: 'red' }}>Ошибка: {error}</p>;\n\n    return (\n        <ul>\n        {words.map(word => (\n            <li key={word.id}>\n            {word.word} — {word.translation}\n            <button onClick={() => deleteWord(word.id)}>Удалить</button>\n            </li>\n        ))}\n        </ul>\n    );\n} \n\n/*import { createContext, useState, useEffect } from 'react';\n\nexport const WordsContext = createContext();\n\nexport function WordsProvider({ children }) {\n    const [words, setWords] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const apiBase = 'http://itgirlschool.justmakeit.ru/api/words';\n\n  // Загрузка слов\n    const fetchWords = async () => {\n        setLoading(true);\n        try {\n            const response = await fetch(apiBase);\n            if (!response.ok) throw new Error('Ошибка при получении слов');\n            const data = await response.json();\n            \n            const normalizedData = data.map(word => ({\n                ...word,\n                id: parseInt(word.id, 10), \n            }));\n\n            setWords(normalizedData);\n            setError(null);\n        } catch (err) {\n            setError(err.message);\n        } finally {\n            setLoading(false);\n        }\n    }; \n        \n  // Добавление слова\n    const addWord = async (newWord) => {\n    try {\n        const response = await fetch(`${apiBase}/add`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(newWord),\n        });\n        if (!response.ok) throw new Error('Ошибка при добавлении слова');\n        await fetchWords(); // Перезагрузка списка\n    } catch (err) {\n        setError(err.message);\n    }\n};\n\n\n  // Обновление слова\n  const updateWord = async (updatedWord) => {\n    try {\n        const response = await fetch(`${apiBase}/${updatedWord.id}/update`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(updatedWord),\n        });\n        if (!response.ok) throw new Error('Ошибка при обновлении слова');\n        await fetchWords(); // Перезагрузка списка\n    } catch (err) {\n        setError(err.message);\n    }\n};\n\n  // Удаление слова\n    const deleteWord = async (id) => {\n    try {\n        const response = await fetch(`${apiBase}/${id}/delete`, {\n            method: 'POST',\n        });\n        if (!response.ok) throw new Error('Ошибка при удалении слова');\n        setWords(prev => prev.filter(w => w.id !== id));\n    } catch (err) {\n        setError(err.message);\n    }\n};\n\n    useEffect(() => {\n    fetchWords();\n    }, []);\n\n    return (\n        <WordsContext.Provider value={{\n            words,\n            loading,\n            error,\n            addWord,\n            updateWord,\n            deleteWord\n        }}>\n            {children}\n        </WordsContext.Provider>\n    );\n} */"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,YAAY,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM;IAAEC,KAAK;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAW,CAAC,GAAGT,UAAU,CAACC,YAAY,CAAC;EAEtE,IAAIM,OAAO,EAAE,oBAAOJ,OAAA;IAAAO,QAAA,EAAG;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAC3C,IAAIN,KAAK,EAAE,oBAAOL,OAAA;IAAGY,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAM,CAAE;IAAAN,QAAA,GAAC,wCAAQ,EAACF,KAAK;EAAA;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAEjE,oBACIX,OAAA;IAAAO,QAAA,EACCJ,KAAK,CAACW,GAAG,CAACC,IAAI,iBACXf,OAAA;MAAAO,QAAA,GACCQ,IAAI,CAACA,IAAI,EAAC,UAAG,EAACA,IAAI,CAACC,WAAW,eAC/BhB,OAAA;QAAQiB,OAAO,EAAEA,CAAA,KAAMX,UAAU,CAACS,IAAI,CAACG,EAAE,CAAE;QAAAX,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,GAFnDI,IAAI,CAACG,EAAE;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGZ,CACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7FAT,EAAA,CAlBwBD,QAAQ;AAAAkB,EAAA,GAARlB,QAAQ;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}