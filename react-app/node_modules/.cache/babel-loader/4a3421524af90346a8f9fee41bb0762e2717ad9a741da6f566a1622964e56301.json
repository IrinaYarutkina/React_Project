{"ast":null,"code":"/*import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { WordsContext } from '../Context/WordsContext';\nimport '../Card.css';\n\n\nfunction Card({ onViewTranslation, learnedCount }) {\n  const { words, loading, error } = useContext(WordsContext);\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  const currentId = parseInt(id, 10);\n  const [showTranslation, setShowTranslation] = useState(false);\n  const [viewed, setViewed] = useState(false);\n  const showTranslationBtnRef = useRef(null);\n\n  useEffect(() => {\n    setShowTranslation(false);\n    setViewed(false);\n    if (showTranslationBtnRef.current) {\n      showTranslationBtnRef.current.focus();\n    }\n  }, [id]);\n\n  if (loading || words.length === 0) return <p>Загрузка...</p>;\n  if (error) return <p>Ошибка: {error}</p>; \n  const word = words.find((w) => w.id === currentId);\n  \n  if (!word) {\n    console.log('❌ Слово не найдено. currentId:', currentId, 'Список слов:', words);\n    return <div>Слово не найдено</div>;\n  } \n\n  const handleShowTranslation = () => {\n    if (!viewed && onViewTranslation) {\n      onViewTranslation();\n      setViewed(true);\n    }\n    setShowTranslation(true);\n  };\n\n  const getPrevId = () => {\n    const currentIndex = words.findIndex(w => w.id === currentId);\n    return currentIndex === 0 ? words[words.length - 1].id : words[currentIndex - 1].id;\n  };\n\n  const getNextId = () => {\n    const currentIndex = words.findIndex(w => w.id === currentId);\n    return currentIndex === words.length - 1 ? words[0].id : words[currentIndex + 1].id;\n  };\n  \n  return (\n    <div>\n      <div style={{ display: 'flex', justifyContent: 'space-between', maxWidth: '420px', margin: '20px auto' }}>\n        <button className=\"word-list-button\" onClick={() => navigate(`/card/${getPrevId()}`)}>← Назад</button>\n        <button className=\"word-list-button\" onClick={() => navigate(`/card/${getNextId()}`)}>Вперед →</button>\n      </div>\n\n      <div className=\"word-card\">\n        <div className=\"card-content\">\n          <p className=\"english-word\"><strong>Слово:</strong> {word.english}</p>\n          <p><strong>Транскрипция:</strong> {word.russian}</p>\n\n          {!showTranslation ? (\n            <button\n              ref={showTranslationBtnRef}\n              className=\"word-list-button\"\n              onClick={handleShowTranslation}\n            >\n              Показать перевод\n            </button>\n          ) : (\n            <>\n              <p className=\"translation\"><strong>Перевод:</strong> {word.russian}</p>\n              <button\n                className=\"word-list-button\"\n                onClick={() => setShowTranslation(false)}\n                style={{ marginTop: '10px' }}\n              >\n                Скрыть перевод\n              </button>\n            </>\n          )}\n\n          <p style={{ marginTop: '20px', fontStyle: 'italic' }}>\n            Изучено слов за тренировку: {learnedCount}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card; */\n\n/* import React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../Card.css';\n\nconst words = [\n  { id: 1, word: 'apple', translation: 'яблоко' },\n  { id: 2, word: 'book', translation: 'книга' },\n  { id: 3, word: 'sun', translation: 'солнце' },\n];\n\nfunction Card({ onViewTranslation, learnedCount}) {\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  // id из строки в число\n  const currentId = parseInt(id, 10);\n  const word = words.find(w => w.id === currentId);\n  const [showTranslation, setShowTranslation] = useState(false);\n  const [viewed, setViewed] = useState(false);\n  const showTranslationBtnRef = useRef(null); \n\n  useEffect(() => {\n    // скрывается перевод при смене слова\n    setShowTranslation(false);\n    setViewed(false);\n    // автофокус на кнопке \"показать перевод\"\n    if (showTranslationBtnRef.current) {\n      showTranslationBtnRef.current.focus();\n    }\n  }, [id]);\n\n  if (!word) {\n    return <div>Слово не найдено</div>;\n  }\n  const handleShowTranslation = () => {\n    if (!viewed && onViewTranslation) {\n      onViewTranslation(); // увеличиваем счётчик\n      setViewed(true);\n    }\n    setShowTranslation(true);\n  };\n\n  // переход по словам\n  const goPrev = () => {\n    const prevId = currentId === words[0].id ? words[words.length - 1].id : currentId - 1;\n    navigate(`/card/${prevId}`);\n  };\n\n  const goNext = () => {\n    const nextId = currentId === words[words.length - 1].id ? words[0].id : currentId + 1;\n    navigate(`/card/${nextId}`);\n  }; \n\n  return (\n    <div>\n      \n      <div style={{ display: 'flex', justifyContent: 'space-between', maxWidth: '420px', margin: '20px auto' }}>\n        <button className=\"word-list-button\" onClick={goPrev}>← Назад</button>\n        <button className=\"word-list-button\" onClick={goNext}>Вперед →</button>\n      </div>\n\n        \n      <div className=\"word-card\">\n        <div className=\"card-content\">\n          <p className=\"english-word\"><strong>Слово:</strong> {word.word}</p>\n\n          {!showTranslation ? (\n            <button\n            ref={showTranslationBtnRef} \n              className=\"word-list-button\"\n              onClick={handleShowTranslation}\n            >\n              Показать перевод\n            </button>\n          ) : (\n            <>\n              <p className=\"translation\"><strong>Перевод:</strong> {word.translation}</p>\n              <button\n                className=\"word-list-button\"\n                onClick={() => setShowTranslation(false)}\n                style={{ marginTop: '10px' }}\n              >\n                Скрыть перевод\n              </button>\n            </>\n          )}\n          \n          <p style={{ marginTop: '20px', fontStyle: 'italic' }}>\n            Изучено слов за тренировку: {learnedCount}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card; */","map":{"version":3,"names":[],"sources":["/Users/irinaarutkina/Desktop/worksIras/React_Project/React_Project/react-app/src/Components/Card.jsx"],"sourcesContent":["/*import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { WordsContext } from '../Context/WordsContext';\nimport '../Card.css';\n\n\nfunction Card({ onViewTranslation, learnedCount }) {\n  const { words, loading, error } = useContext(WordsContext);\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  const currentId = parseInt(id, 10);\n  const [showTranslation, setShowTranslation] = useState(false);\n  const [viewed, setViewed] = useState(false);\n  const showTranslationBtnRef = useRef(null);\n\n  useEffect(() => {\n    setShowTranslation(false);\n    setViewed(false);\n    if (showTranslationBtnRef.current) {\n      showTranslationBtnRef.current.focus();\n    }\n  }, [id]);\n\n  if (loading || words.length === 0) return <p>Загрузка...</p>;\n  if (error) return <p>Ошибка: {error}</p>; \n  const word = words.find((w) => w.id === currentId);\n  \n  if (!word) {\n    console.log('❌ Слово не найдено. currentId:', currentId, 'Список слов:', words);\n    return <div>Слово не найдено</div>;\n  } \n\n  const handleShowTranslation = () => {\n    if (!viewed && onViewTranslation) {\n      onViewTranslation();\n      setViewed(true);\n    }\n    setShowTranslation(true);\n  };\n\n  const getPrevId = () => {\n    const currentIndex = words.findIndex(w => w.id === currentId);\n    return currentIndex === 0 ? words[words.length - 1].id : words[currentIndex - 1].id;\n  };\n\n  const getNextId = () => {\n    const currentIndex = words.findIndex(w => w.id === currentId);\n    return currentIndex === words.length - 1 ? words[0].id : words[currentIndex + 1].id;\n  };\n  \n  return (\n    <div>\n      <div style={{ display: 'flex', justifyContent: 'space-between', maxWidth: '420px', margin: '20px auto' }}>\n        <button className=\"word-list-button\" onClick={() => navigate(`/card/${getPrevId()}`)}>← Назад</button>\n        <button className=\"word-list-button\" onClick={() => navigate(`/card/${getNextId()}`)}>Вперед →</button>\n      </div>\n\n      <div className=\"word-card\">\n        <div className=\"card-content\">\n          <p className=\"english-word\"><strong>Слово:</strong> {word.english}</p>\n          <p><strong>Транскрипция:</strong> {word.russian}</p>\n\n          {!showTranslation ? (\n            <button\n              ref={showTranslationBtnRef}\n              className=\"word-list-button\"\n              onClick={handleShowTranslation}\n            >\n              Показать перевод\n            </button>\n          ) : (\n            <>\n              <p className=\"translation\"><strong>Перевод:</strong> {word.russian}</p>\n              <button\n                className=\"word-list-button\"\n                onClick={() => setShowTranslation(false)}\n                style={{ marginTop: '10px' }}\n              >\n                Скрыть перевод\n              </button>\n            </>\n          )}\n\n          <p style={{ marginTop: '20px', fontStyle: 'italic' }}>\n            Изучено слов за тренировку: {learnedCount}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card; */\n\n\n\n\n/* import React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../Card.css';\n\nconst words = [\n  { id: 1, word: 'apple', translation: 'яблоко' },\n  { id: 2, word: 'book', translation: 'книга' },\n  { id: 3, word: 'sun', translation: 'солнце' },\n];\n\nfunction Card({ onViewTranslation, learnedCount}) {\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  // id из строки в число\n  const currentId = parseInt(id, 10);\n  const word = words.find(w => w.id === currentId);\n  const [showTranslation, setShowTranslation] = useState(false);\n  const [viewed, setViewed] = useState(false);\n  const showTranslationBtnRef = useRef(null); \n\n  useEffect(() => {\n    // скрывается перевод при смене слова\n    setShowTranslation(false);\n    setViewed(false);\n    // автофокус на кнопке \"показать перевод\"\n    if (showTranslationBtnRef.current) {\n      showTranslationBtnRef.current.focus();\n    }\n  }, [id]);\n\n  if (!word) {\n    return <div>Слово не найдено</div>;\n  }\n  const handleShowTranslation = () => {\n    if (!viewed && onViewTranslation) {\n      onViewTranslation(); // увеличиваем счётчик\n      setViewed(true);\n    }\n    setShowTranslation(true);\n  };\n\n  // переход по словам\n  const goPrev = () => {\n    const prevId = currentId === words[0].id ? words[words.length - 1].id : currentId - 1;\n    navigate(`/card/${prevId}`);\n  };\n\n  const goNext = () => {\n    const nextId = currentId === words[words.length - 1].id ? words[0].id : currentId + 1;\n    navigate(`/card/${nextId}`);\n  }; \n\n  return (\n    <div>\n      \n      <div style={{ display: 'flex', justifyContent: 'space-between', maxWidth: '420px', margin: '20px auto' }}>\n        <button className=\"word-list-button\" onClick={goPrev}>← Назад</button>\n        <button className=\"word-list-button\" onClick={goNext}>Вперед →</button>\n      </div>\n\n        \n      <div className=\"word-card\">\n        <div className=\"card-content\">\n          <p className=\"english-word\"><strong>Слово:</strong> {word.word}</p>\n\n          {!showTranslation ? (\n            <button\n            ref={showTranslationBtnRef} \n              className=\"word-list-button\"\n              onClick={handleShowTranslation}\n            >\n              Показать перевод\n            </button>\n          ) : (\n            <>\n              <p className=\"translation\"><strong>Перевод:</strong> {word.translation}</p>\n              <button\n                className=\"word-list-button\"\n                onClick={() => setShowTranslation(false)}\n                style={{ marginTop: '10px' }}\n              >\n                Скрыть перевод\n              </button>\n            </>\n          )}\n          \n          <p style={{ marginTop: '20px', fontStyle: 'italic' }}>\n            Изучено слов за тренировку: {learnedCount}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card; */ \n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}